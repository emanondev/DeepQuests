package emanondev.quests.task;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.entity.Player;

import emanondev.quests.Defaults;
import emanondev.quests.configuration.ConfigSection;
import emanondev.quests.mission.Mission;
import emanondev.quests.newgui.gui.Gui;
import emanondev.quests.player.QuestPlayer;
import emanondev.quests.quest.QuestManager;
import emanondev.quests.utils.QCWithWorlds;

public class VoidTaskType extends TaskType {
	public VoidTaskType() {
		super("ERROR");
	}
	
	@Override
	public Task getTaskInstance(ConfigSection m, Mission parent) {
		return new VoidTask(m,parent);
	}

	public class VoidTask extends QCWithWorlds implements Task {
		private final static String name = "Void Task";
		
		public VoidTask(ConfigSection m,Mission parent) {
			super(m,parent);
		}
	
		@Override
		public Mission getParent() {
			return (Mission) super.getParent();
		}
	
		@Override
		public TaskType getTaskType() {
			return VoidTaskType.this;
		}
		
		@Override
		public String getDisplayName() {	return name;	}
		@Override
		public int getMaxProgress() {	return 1;	}
		@Override
		public String getUnstartedDescription() {	return name;	}
		@Override
		public String getProgressDescription() {	return name;	}
		@Override
		public boolean onProgress(QuestPlayer p) {	return false;	}
		@Override
		public boolean onProgress(QuestPlayer p, int amount) {	return false;	}
		
		protected  List<String> getWorldsListDefault(){
			return Defaults.TaskDef.getWorldsListDefault();
		}
		protected boolean shouldWorldsAutogen() {
			return Defaults.TaskDef.shouldWorldsAutogen();
		}
		protected boolean getUseWorldsAsBlacklistDefault() {
			return Defaults.TaskDef.getUseWorldsAsBlacklistDefault();
		}
		@Override
		public Gui createEditorGui(Player p, Gui previusHolder) {
			return new QCWithWorldsEditor("&cCurrupted Task", p, previusHolder);
		}
		
		@Override
		public QuestManager getQuestManager() {
			return getParent().getQuestManager();
		}
		
		public List<String> getInfo(){
			List<String> info = new ArrayList<String>();
			info.add("   &6&lMission Info   ");
			info.add("&9DisplayName: &e"+ this.getDisplayName());
			info.add("&9Type: &e"+getTaskType().getKey());

			info.add("&7Priority: "+getPriority()+" ID: "+ this.getID());

			if (this.getWorldsList().size() > 0) {
				if (this.isWorldListBlacklist()) {
					info.add("&9Blacklisted Worlds:");
					for (String world : this.getWorldsList())
						info.add("&9 - &c" + world);
				}
				else {
					info.add("&9WhiteListed Worlds:");
					for (String world : this.getWorldsList())
						info.add("&9 - &a" + world);
				}
			}
			return info;
		}

		
	}

	@Override
	public Material getGuiItemMaterial() {
		return Material.BARRIER;
	}

	private static final List<String> description = Arrays.asList(
			"&7Task generated by an error"
			);
	@Override
	public List<String> getDescription() {
		return description;
	}
}
